1. 总体感受是比较累，9：30开始发题，然后赶紧看题讨论，11：30第一次跟proctor讨论，然后猛写代码，3：30第二次讨论，4：30结束。基本比较好的流程是第一次讨论前整理出思路，设计好需要的数据结构和算法，第二次讨论前完成所有代码编写，之后最后一个小时补充注释、修饰代码。.鐣欏璁哄潧-涓€浜�-涓夊垎鍦�
2. 下面几点是Amazon的面试官告诉我的在group interview的加分项，需要格外注意。
2.1 communication和leadership非常非常重要。proctor虽然坐在屋子中间，但他们在时刻注意大家的讨论情况，并且在默默记录。其次别闷头狂写，主动问候别人how is going甚至主动帮助别人解决问题都是你的bonus。
2.2 一定要跟proctor解释清楚自己的思路，用图，说慢点。重点说你用了什么数据结构，为什么用那个，有什么risk，有什么好处，如果用java，一定要熟练Collection里的数据结构，尤其两种List，HashMap，PriorityQueue，知道他们各种操作的时间复杂度和优缺点；你用的算法是什么，复杂度是什么，还能不能更优化。这里的bonus是你知道这个task的多个解法，比如greedy和DP，虽然DP可以得到optimal的result，但是greedy算法的时间复杂度更低，可读性更好。要是能做到这点，offer基本就到手了。
2.3代码方面，proctor告诉我他们其实之后基本不看代码，因为只要知道了你的算法，然后看到你的代码能work，基本代码这块就够了。但是代码里注释要完全，代码一定要写得干净


1. 3个人一组，三份代码，讨论pros and cons, 两个面试官在旁边看着，讨论半小时，跟面试官交流15分钟左右。考察点应该在于讨论，code错误明显。

2. 各自搞各自的， 一个人三道题，
    1）. 根据产品id和目的地地址，找到相应运输方式，两重forloop解决。
    2）. 优化，两个方向二选一： 一、尽量减少未满足的requirement。 二、尽快满足顾客需求（记不清，没选这个）
    最大满足订单量或最少迟到的订单
    3）. 减少运送cost

考察点应该在于如何处理调用大project中的各个package中的class， 题目本身不难，都可以通过暴力for loop 解决。
总时间大概在2.5小时，中间有一次和面试官交流的机会（开始后30分钟-1.5小时任选section），提交代码后有一次。

大概就是给你一个货物和存储点的list，和一个存储点到存储点的运输方式的list。
现在给你一个货物和目的地。

你需要先得到一个所有可行的，有这个目的地和货物的的存储点列表。

（或者送的更多，二选一）
如何更便宜

限制条件有三个。1每种运输方式的价格，2每种运输方式的时间delay，3每个储存点的货物量。

我可能下了一个订单10天内收获，需要多个存储点，每个点可以用多种方式运给我。
可能你凑不满我的单，可能你不能按时送到，可能你送到但是很贵。