// Longest Palindrom SubString

public String longestPalindrome(String s) {
    if (s == null || s.length() == 0) return null;
    int start = 0, end = 0;
    for (int i = 0; i < s.length(); i++ ) {
        int len1 = expandAroundCenter(s, i, i);
        int len2 = expandAroundCenter(s, i, i + 1);
        int len = Math.max(len1, len2);
        if (len > end - start) {
            start = i - (len - 1) / 2;
            end = i + len / 2;
        }
    }
    return s.substring(start, end + 1);

}

private int expandAroundCenter(String s, int left, int right) {
    int L = left, R = right;
    while (L >= 0 && R < s.length() && s.charAt(L) == s.charAt(R)) {
        L--;
        R++;
    }
    return R - L - 1;

}


// Window Sum

public List<Integer> getSum(List<Integer> A, int k) {
    List<Integer> rst = new ArrayList<>();
    if (A == null || A.size() == 0) {
        return rst;
    }
    for (int i = 0; i < A.size() - k + 1; i ++) {
        int tmpSum = 0;
        for(int j = 0; j < k; j++) {
            tmpSum += A.get(i + j);
        }
        rst.add(tmpSum);
    }
    return rst;
}

// K nearest points

static class Facebook.Point {
        double x;
        double y;
        public Facebook.Point(double a, double b) {
            x = a;
            y = b;
        }
}
public static Facebook.Point[] kClosestPoints(Facebook.Point[] arr, Facebook.Point origin, int k) {
        if (arr == null || arr.length == 0 || k <= 0) {
            return new Facebook.Point[0];
        }

        Facebook.Point[] rst = new Facebook.Point[k];
        Queue<Facebook.Point> heap = new PriorityQueue<Facebook.Point>(k,new Comparator<Facebook.Point>(){
            @Override
            public int compare(Facebook.Point a, Facebook.Point b) {
                return (int)(getDistance(a, origin) - getDistance(b, origin));
            }
        });

        for (int i = 0; i < arr.length; i++) {
            heap.offer(arr[i]);
            if (heap.size() > k) {
                heap.poll();
            }
        }
        int idx = 0;
        while (!heap.isEmpty()) {
            rst[idx++] = heap.poll();
        }
        return rst;
}

private static double getDistance (Facebook.Point a, Facebook.Point b) {
	return Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
}


// MST

static class Connection{
        String city1;
        String city2;
        int cost;
        public Connection(String a, String b, int c){
            city1 = a;
            city2 = b;
            cost = c;
        }
}

private static int componentNum;

public static List<Connection> getLowCost(List<Connection> connections) {
	if (connections == null || connections.size() == 0) {
	    return new ArrayList<>();
	}

	List<Connection> rst = new ArrayList<>();
	Map<String, Integer> map = new HashMap<>();

	Collections.sort(connections, new Comparator<Connection>() {
	    @Override
	    public int compare (Connection a, Connection b) {
	        return a.cost - b.cost;
	    }
	});

    componentNum = 0;
	for (Connection con : connections) {
	    String c1 = con.city1;
	    String c2 = con.city2;
	    if (unionFind(c1, c2, map)) {
	        rst.add(con);
	    }
	}
	String selectCity = rst.get(0).city1;
    int checkComp = map.get(selectCity);
    for (String str : map.keySet()) {
        if (map.get(str) != checkComp) {
            return new ArrayList<>();
        }
    }

    Collections.sort(rst, new Comparator<Connection>(){
        @Override
        public int compare(Connection a, Connection b) {
            if (a.city1.equals(b.city1)) {
                return a.city2.compareTo(b.city2);
            }
            return a.city1.compareTo(b.city1);
        }
    });
    return rst;
}

private static boolean unionFind(String a, String b, Map<String, Integer> map) {
	if (!map.containsKey(a) && !map.containsKey(b)) {
	    map.put(a, componentNum);
	    map.put(b, componentNum);
	    componentNum++;
	    return true;
	} else if (!map.containsKey(a) && map.containsKey(b)) {
	    map.put(a, map.get(b));
	    return true;
	} else if (map.containsKey(a) && !map.containsKey(b)) {
	    map.put(b, map.get(a));
	    return true;
	} else {
	    int aU = map.get(a);
	    int bU = map.get(b);
	    if (aU == bU) {
	        return false;
	    } else {
	        for (String str : map.keySet()) {
                if (map.get(str) != aU) {
                    map.put(str, aU);
                }
	        }
	        return true;
	    }
	}
}



// Deep copy of random pointers

static class RandomListNode {
        int label;
        RandomListNode next, random;
        RandomListNode(int x) {this.label = x; }
}

public RandomListNode copyRandomList(RandomListNode head) {
	if (head == null) {
	    return null;
	}

	Map<RandomListNode, RandomListNode> map = new HashMap<>();
	RandomListNode cur = head;
	RandomListNode nHead = new RandomListNode(cur.label);
	RandomListNode copy = nHead;

	while (cur != null) {
	    if (cur.next != null) {
	        RandomListNode tmp = new RandomListNode(cur.next.label);
	        copy.next = tmp;
	    }
	    map.put(cur,copy);
	    copy.random = cur.random;
	    cur = cur.next;
	    copy = cur.next;
	}

	copy = nHead;
	while (copy != null) {
	    copy.random = map.get(copy.random);
	    copy = copy.next;
	}

	return nHead;
}


// order dependency

static class Order{
        String order = "";
        public Order(String s) {this.order = s;}
    }

static class OrderDependency {
    Order cur;
    Order pre;
    public OrderDependency(Order o1, Order o2) {
        cur = o1;
        pre = o2;
    }
}
public static List<Order> getOrderList(List<OrderDependency> orderDependencies) {
	if (orderDependencies == null || orderDependencies.size() == 0) {
	    return new ArrayList<>();
	}

    List<Order> rst = new ArrayList<>();
	Map<Order, List<Order>> outDegreeMap = new HashMap<>();
	Map<Order, Integer> inDegreeMap = new HashMap<>();
	Set<Order> set = new HashSet<>();

	for (OrderDependency od : orderDependencies) {
	    Order cur = od.cur;
	    Order pre = od.pre;
	    set.add(cur);
	    set.add(pre);

	    if (!outDegreeMap.containsKey(pre)) {
	        outDegreeMap.put(pre, new ArrayList<>());
	        outDegreeMap.get(pre).add(cur);
	    } else {
	        outDegreeMap.get(pre).add(cur);
	    }

	    if (!outDegreeMap.containsKey(cur)) {
	        outDegreeMap.put(cur, new ArrayList<>());
	    }

	    if (!inDegreeMap.containsKey(cur)) {
	        inDegreeMap.put(cur, 1);
	    } else {
	        inDegreeMap.put(cur, inDegreeMap.get(cur) + 1);
	    }
	    if (!inDegreeMap.containsKey(pre)) {
	       inDegreeMap.put(pre, 0);
	    }
	}

	Queue<Order> queue = new LinkedList<>();

	for (Order od : inDegreeMap.keySet()) {
	    if (inDegreeMap.get(od) == 0) {
            queue.offer(od);
	    }
	}

	while (!queue.isEmpty()) {
	    Order tmp = queue.poll();
        rst.add(tmp);
        for (Order od : outDegreeMap.get(tmp)) {
            inDegreeMap.put(od, inDegreeMap.get(od) - 1);
            if (inDegreeMap.get(od) == 0) {
                queue.offer(od);
            }
        }
	}
	if (set.size() != rst.size()) return new ArrayList<>();
	return rst;
}



// Five Scores

static class Facebook.Result {
    int id;
    int value;
    public Facebook.Result(int id, int value) {
        this.id = id;
        this.value = value;
    }
}

public static Map<Integer, Double> getHighFive(Facebook.Result[] rsts) {
    if (rsts == null || rsts.length == 0) {
        return null;
    }

    Map<Integer, Double> result = new HashMap<>();

    Map<Integer, List<Integer>> map = new HashMap<>();

    for (Facebook.Result rst : rsts) {
        if (!map.containsKey(rst.id)) {
            map.put(rst.id, new ArrayList<>());
            map.get(rst.id).add(rst.value);
        } else {
            map.get(rst.id).add(rst.value);
        }
    }

    for (Integer id: map.keySet()) {
        List<Integer> tmp = map.get(id);
        Collections.sort(tmp);
        Collections.reverse(tmp);
        double tmpAvg = 0;
        for(int i = 0; i < 5; i++) {
            tmpAvg += tmp.get(i);
        }
        tmpAvg = tmpAvg / 5.0;
        result.put(id,tmpAvg);
    }
    return result;
}



// Company Tree (Maximum Subtree of Average)

static class SubTree {
    int val;
    List<SubTree> kids;
    public SubTree(int val) {
        this.val = val;
        kids = new ArrayList<>();
    }
}

static class SumCnt {
    int sum;
    int cnt;
    public SumCnt(int sum, int cnt) {
        this.sum = sum;
        this.cnt = cnt;
    }
}

private static double avgRst = Double.MIN_VALUE;
private static SubTree result;

public static SubTree getMaxAve(SubTree root) {
    if (root == null) {
        return null;
    }
    dfs(root);
    return result;
}

private static SumCnt dfs(SubTree root) {
    if (root.kids == null || root.kids.size() == 0) {
        return new SumCnt(root.val, 1);
    }

    int curSum = root.val;
    int curCnt = 1;

    for (SubTree kid : root.kids) {
        SumCnt sc = dfs(kid);
        curSum += sc.sum;
        curCnt += sc.cnt;
    }

    double curAvgRst = (double) curSum / curCnt;
    if (avgRst < curAvgRst) {
        avgRst = curAvgRst;
        result = root;
    }

    return new SumCnt(curSum, curCnt);
}
















